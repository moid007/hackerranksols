Unsolved Problems::

------------------------------------------------------------------------------------------------------------------
The purpose of this assignment is to process rat exam data and calculate a ratIQ for each rat. 
Input: The user will be put the data for the rats in a text file named "test.txt" 
(here is an example that you can use). 
The first line of the input file will be the number of rats who took the test. 
Each line after that will contain a name (string) a number of correct test answers (int) 
and the number of seconds it took to take the exam (int). Each piece of data will be separated by one blank space.
For example: 
4 George 24 34 Jane 24 17 Joan 30 32 Phil 25 29 

Processing: 
First the program will read in the number of tests. 
Then for each test the program will read in the name and calculate the rat's IQ score using the following criteria.
The rat gets 10 points for each correct answer and an additional 
5 points, if he/she took less than 30 seconds to complete the exam. 

For the data above, George would have a ratIQ of 240 and Jane would have a ratIQ of 245. 

Output: 
The program will print one line of output for each rat that contains the rat's name and ratIQ score.
For the above input, the output could look like this: 
George has a ratIQ of 240. 
Jane has a ratIQ of 245. 
Joan has a ratIQ of 300. 
Phil has a ratIQ of 255.
------------------------------------------------------------------------------------------------------------------
In C++:
I need to make a socket program with a server and a client file.
First the client creates a TCP connection with the server using <server_address>  as the server address and <n_port>  as the negotiation port on the server . The client sends a request to get the random port number on the server where the client will send the actual data. For simplicity, the client will send the characters 123 (as a single message) to initiate the negotiation with the server.
Once the server receives this request in the negotiation port, the server will reply back with a random port number<r_port>  between 1024 and 65535 (inclusive) where it will be listening for the expected data. The server will then write to screen “Negotiation detected. Selected the following random port <r_port>”. Both the client and server must close their sockets once the negotiation stage has completed.
Stage 2: Transaction using UDP sockets – In this stage, the client creates a UDP socket to the server in<r_port>  and sends the data. This data is assumed to be 8-bit ASCII (assuming standard 8-bit encoding for each character, so 1 byte per character) and may be of arbitrary finite length of at least 1 byte. The file is sent over the channel in chunks of 4 characters of the file per UDP packet (a character includes white space, exclamation points, commas, etc.). An exception to this rule occurs when the 2 Client Server Random port Negotiation Send data Acknowledgement Figure 2 Send data Acknowledgement end of the file is reached and, in that case, less than 4 characters of the file can be sent in the next packet. We call each such chunk of the file a payload.
The packet may contain other information in addition to the payload, if you deem it useful (for example, to indicate the end of the file). After each packet is sent, the client waits for an acknowledgement from the server that comes in the form of the most recent transmitted payload in capital letters. These acknowledgements are output to the screen on the client side as one line per packet (the client does not need to write these acknowledgements to any file).
Once the file has been sent and the last acknowledgement received, the client closes its ports and terminates automatically; that is, it must determine the end of the file.
On the other side, the server receives the data and writes it (does not append) to file using the filename “output.txt”. After each received packet, the server uses the UDP socket to send back an acknowledgement to the client that is the most recent received payload in capital letters. The server does not write the received data to screen.
Once the last acknowledgement has been sent, the server closes all ports and terminates automatically (that is, it must determine that end of the transmission has occurred from the client).

client file name should be "client" and takes command line inputs <server address>,<n_port>,and <file_name>.
server file name should be server and takes command line inputs <n_port>.
------------------------------------------------------------------------------------------------------------------
In C++:
Write a windows console application in C++ that simulates an Automated Teller Machine (ATM) menu similar to the following (this program assumes you are uniquely logged in).

     Welcome to the DeVry Bank Automated Teller Machine

Check balance
Make withdrawal
Make deposit
View account information
View statement
View bank information
Exit


     The result of choosing #1 will be the following:
          Current balance is: $2439.45

     The result of choosing #2 will be the following:
          How much would you like to withdraw? $200.50

     The result of choosing #3 will be the following:
          How much would you like to deposit? $177.32

     The result of choosing #4 will be the following:
          Name: (Student’s first and last name goes here)
          Account Number: 1234554321

     The result of choosing #5 will be the following:
          01/01/11 - McDonald’s - $6.27
          01/15/11 - Kwik Trip - $34.93
          02/28/11 - Target - $124.21

     The result of choosing #6 will be the following:
          Devry Bank, established 2011
          (123) 456-7890
          12345 1st St.
          Someplace, NJ 12345

     The result of choosing #7 will be the following:
          *Exit the program - terminate console application.



Step 2: Processing Logic

You will create a Menu Builder class (for menu applications), a Test Menu class (for Main), and a MenuBuilder.h for a total of three files as a demonstration of understanding, creating, and using classes.

Using the pseudocode below, write the code that will meet the requirements.

Create a Test Menu class
      For main method and to call the Menu Driven class

Create a MenuBuilder Class
         This will be where you create statements for the following:
1. Check balance
2. Make withdrawal
3. Make deposit
4. View account information
5. View statement
6. View bank information
7. Exit
Create a MenuBuilder.h
Include a header file in your program.
This will be where you utilize standardized Identifiers,
preprocessor directives, classes, namespaces, and so forth.
------------------------------------------------------------------------------------------------------------------
Game theory problem

This is a Game Theory question.
A legislative committee must decide whether to propose a bill to congress. The committee may propose a strong bill, a weak bill or no bill. Once a bill is proposed congress may pass the bill as written, amend and pass the bill, (strong bills become weak and weak bills become strong), or withhold a vote and maintain the status quo.
The committee and congress receive the following utility payouts.
Committee:                   Congress:
Strong bill         0                                  1
Weak bill          1                                  x
Status quo        x                                  0

However, the committee is uncertain about congress’s actual preferences and believes that with probability p congress’s preferences are exactly the same as its own. Otherwise congresse's preferences will be the same as listed above.
Draw and solve a game tree incorporating the committee’s uncertainty about congress’s preferences. The committee moves first. Assume that x and p can take any value between 0 and 1. Your solution to the game will depend on p and x.

------------------------------------------------------------------------------------------------------------------
Create a regular expression for the language consisting of the set of strings over Σ = {0, 1} such that each string in the language either (a) has a sequence of 5 consecutive 0s or (b) has a sequence of an odd number of consecutive 1s followed at some point by a sequence of an even number of consecutive 1s. Thus 00000, 000000, 11100000, 111, and 10011 would be in the language, but 110000 would not.
------------------------------------------------------------------------------------------------------------------
Java question

Can someone help me with the following program

Class design
Here are three Cryptography methods – Caesar, Transposition and Reverser. They all have something in common. They encrypt and decrypt messages. That is, they take a string of words and translate each word using the encoding algorithm appropriate for that cipher. Thus each class cipher will need polymorphic encode() and decode() methods, which take a word and encodes and decodes it according to the rule of the particular cipher.
From a design perspective, the encrypt() method and the decrypt() methods will be the same for every class. They simply break message into words and have each word encode or decode. However, the encode and decode methods will be different for each cipher. Figure 1 shows a hierarchy of the classes.


 From the above analysis a partial abstract class Cipher is depicted be by Listing 1.

import java.util.StringTokenizer;
public abstract class Cipher {
private String message;
StringBuffer encrypted_message, decrypted_message;
public Cipher(String text)
{
// Complete the constructor definition
}
public final void encrypt() {
/* The message string is tokenized into individual words,
* and each word is encoded by calling the encode method */
encrypted_message = new StringBuffer(); StringTokenizer words = new StringTokenizer(message);
while(words.hasMoreTokens()) {
String s = words.nextToken(); s = encode(s) + " "; encrypted_message.append(s);
} }
public final void decrypt(String message) {
/* The encoded message string is tokenized into individual words, * and each word is encoded by calling the decode method
*/
// Supply the code that will decrypt the encrypted string }
public String getEncodedMessage() {
return encrypted_message.toString(); }
public String getDecodedMessage()
{
return decrypted_message.toString();
}
public abstract String encode(String s);
public abstract String decode(String s); }
Listing 1. Abstract class Cipher


The class Caesar inherits the abstract class Cipher. This class defines the methods code and decode. The method encode takes a String parameter and returns a String result. It takes each character of the parameter and performs a Caesar shift on the character. That is, a shift with possible wrap around can be coded as follows:

char ch = word.charAt(i);
ch = (char)(‘a’ + ch – ‘a’ + 3) % 26);

The method decode does the reverse. Listing 2 shows a partial definition of this class - Caesar

public class Caeser extends Cipher {
public Caeser(String s) {
super(s); }
public String encode(String word) {
}
return code(word,Constants.ENCODE_SHIFT );
public String decode(String word)
{
// Complete this method so that it decodes the encoded string
}
String code(String word, int SHIFT) {
StringBuffer result = new StringBuffer();
for (int i = 0; i < word.length(); i++) {
char ch = word.charAt(i);
ch = determineCharacter(ch, SHIFT); result.append(ch);
}
return result.toString(); }
public char determineCharacter(char ch, final int shift) {
if(Character.isUpperCase(ch))
ch = (char)('A' + (ch - 'A' + shift) % Constants.WRAP_AROUND);
// Complete the if/else so that lower case letters are accounted for
return ch; }
}
Listing 2.


In similar fashion, the class Transpose inherits Cipher and defines the methods code and encode. Listing 3 shows an incomplete definition of the class Transpose.

public class Transpose extends Cipher {
Transpose(String s) {
super(s); }
public String encode(String word)
{
StringBuffer result = new StringBuffer(word); result.reverse();
return result.toString();
}
public String decode(String word) {
// Complete this method so that it reverses the encoded string; }
}
Listing 3


The class Reverser inherits the class Transpose. Listing 4 shows an incomplete definition of this
class.
public class Reverser extends Transpose
{
public Reverser(String s)
{
// Complete the constructor
}
public String reverseText(String word)
{
// Complete this method so that it reverses the original string
}
public String decode(String word)
{
// Complete this method so that it reverses the reversed string
} }
Listing 4


Things to do
From the above discussion complete the classes Cipher, Caesar, and Transpose, and Reverser. In addition, define an interface called Constants that will store the value 26 in the identifier WRAP_AROUND; similarly, store 3 in the identifier, ENCODE_SHIFT, and 23 in the identifier DECODE_SHIFT (needed to decode the encoded message). The code in the method determineCharacter(char ch, int shift) accounts for lower case letters only, extend the code to include both upper and lower case letters.

We've done the initial coding in class but I just need someone to complete the classes and define the constants interface. Please help.

------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
