Unsolved Problems::

------------------------------------------------------------------------------------------------------------------
The purpose of this assignment is to process rat exam data and calculate a ratIQ for each rat. 
Input: The user will be put the data for the rats in a text file named "test.txt" 
(here is an example that you can use). 
The first line of the input file will be the number of rats who took the test. 
Each line after that will contain a name (string) a number of correct test answers (int) 
and the number of seconds it took to take the exam (int). Each piece of data will be separated by one blank space.
For example: 
4 George 24 34 Jane 24 17 Joan 30 32 Phil 25 29 

Processing: 
First the program will read in the number of tests. 
Then for each test the program will read in the name and calculate the rat's IQ score using the following criteria.
The rat gets 10 points for each correct answer and an additional 
5 points, if he/she took less than 30 seconds to complete the exam. 

For the data above, George would have a ratIQ of 240 and Jane would have a ratIQ of 245. 

Output: 
The program will print one line of output for each rat that contains the rat's name and ratIQ score.
For the above input, the output could look like this: 
George has a ratIQ of 240. 
Jane has a ratIQ of 245. 
Joan has a ratIQ of 300. 
Phil has a ratIQ of 255.
------------------------------------------------------------------------------------------------------------------
In C++:
I need to make a socket program with a server and a client file.
First the client creates a TCP connection with the server using <server_address>  as the server address and <n_port>  as the negotiation port on the server . The client sends a request to get the random port number on the server where the client will send the actual data. For simplicity, the client will send the characters 123 (as a single message) to initiate the negotiation with the server.
Once the server receives this request in the negotiation port, the server will reply back with a random port number<r_port>  between 1024 and 65535 (inclusive) where it will be listening for the expected data. The server will then write to screen “Negotiation detected. Selected the following random port <r_port>”. Both the client and server must close their sockets once the negotiation stage has completed.
Stage 2: Transaction using UDP sockets – In this stage, the client creates a UDP socket to the server in<r_port>  and sends the data. This data is assumed to be 8-bit ASCII (assuming standard 8-bit encoding for each character, so 1 byte per character) and may be of arbitrary finite length of at least 1 byte. The file is sent over the channel in chunks of 4 characters of the file per UDP packet (a character includes white space, exclamation points, commas, etc.). An exception to this rule occurs when the 2 Client Server Random port Negotiation Send data Acknowledgement Figure 2 Send data Acknowledgement end of the file is reached and, in that case, less than 4 characters of the file can be sent in the next packet. We call each such chunk of the file a payload.
The packet may contain other information in addition to the payload, if you deem it useful (for example, to indicate the end of the file). After each packet is sent, the client waits for an acknowledgement from the server that comes in the form of the most recent transmitted payload in capital letters. These acknowledgements are output to the screen on the client side as one line per packet (the client does not need to write these acknowledgements to any file).
Once the file has been sent and the last acknowledgement received, the client closes its ports and terminates automatically; that is, it must determine the end of the file.
On the other side, the server receives the data and writes it (does not append) to file using the filename “output.txt”. After each received packet, the server uses the UDP socket to send back an acknowledgement to the client that is the most recent received payload in capital letters. The server does not write the received data to screen.
Once the last acknowledgement has been sent, the server closes all ports and terminates automatically (that is, it must determine that end of the transmission has occurred from the client).

client file name should be "client" and takes command line inputs <server address>,<n_port>,and <file_name>.
server file name should be server and takes command line inputs <n_port>.
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
